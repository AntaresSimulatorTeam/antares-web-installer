# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python package

on:
  push:
    branches: [ "main", "dev" ]
  pull_request:
    branches: [ "main", "dev" ]
  release:
    types: [ created, edited ]

jobs:
  test:

    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        python-version: [ "3.8", "3.12" ]
        os: [ windows-latest, ubuntu-20.04, ubuntu-22.04 ]

    steps:
      - uses: actions/checkout@v4
      - name: üêç Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: üêç Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install hatch

      - name: üõÇ Test with pytest
        run: hatch run test

      - name: üëî Check code style with hatch
        run: hatch fmt --check

      - name: ‚å®Ô∏è Check typing with mypy
        run: hatch run types:check


  release:
    if: github.event.release
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        python-version: [ "3.8" ]
        os: [ windows-latest, ubuntu-20.04, ubuntu-22.04 ]

    steps:
      - uses: actions/checkout@v4
      - name: üêç Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: üêç Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install hatch

      - name: ‚è≥ Build Installer
        run: |
          hatch run pyinstaller:build_cli AntaresWebInstallerCLI-${{ matrix.os }}
          hatch run pyinstaller:build_gui AntaresWebInstaller{{ }}-${{ matrix.os }}

      - name: üì¶ Archive Windows binaries for upload
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: |
            AntaresWebInstallerCLI-${{ matrix.os }}
            AntaresWebInstaller-${{ matrix.os }}
          path: dist/AntaresWebInstaller-${{ matrix.os }}.exe

      - name: üì¶ Archive Ubuntu binaries for upload
        if: matrix.os != 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: AntaresWebInstallerCLI-${{ matrix.os }}
          path: dist/AntaresWebInstaller-${{ matrix.os }}

      - name: üè∑Ô∏è Get release
        id: get_release
        uses: bruceadams/get-release@v1.3.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: üì§ Upload Release Asset (Windows systems)
        if: matrix.os == 'windows-latest' && github.event_name == 'release'
        env:
          GH_REPO: ${{ github.repository }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload --repo ${{ env.GH_REPO }} ${{ steps.get_release.outputs.tag_name }} dist\AntaresWebInstallerCLI-${{ matrix.os }}.exe
          gh release upload --repo ${{ env.GH_REPO }} ${{ steps.get_release.outputs.tag_name }} dist\AntaresWebInstaller-${{ matrix.os }}.exe

      - name: üì§ Upload Release Asset (UNIX systems)
        if: matrix.os != 'windows-latest' && github.event_name == 'release'
        env:
          GH_REPO: ${{ github.repository }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload --repo ${{ env.GH_REPO }} ${{ steps.get_release.outputs.tag_name }} dist/AntaresWebInstallerCLI-${{ matrix.os }}
          gh release upload --repo ${{ env.GH_REPO }} ${{ steps.get_release.outputs.tag_name }} dist/AntaresWebInstaller-${{ matrix.os }}
